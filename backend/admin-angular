admin-header.component.html
--------------------------------
<div class="w-full h-[70px] bg-black text-white flex items-center justify-between px-5 shadow-md">
  <div class="text-lg font-bold">
    Admin Dashboard
  </div>
  <div class="flex items-center gap-5">
    <button class="text-white px-4 py-2 bg-gray-700 rounded hover:bg-gray-800">
      <a routerLink="/admin/users">Manage Users</a>
    </button>
    <button class="text-white px-4 py-2 bg-gray-700 rounded hover:bg-gray-800">
      <a routerLink="/admin/transactions">Transactions</a>
    </button>
    <button class="text-white px-4 py-2 bg-red-600 rounded hover:bg-red-700">
      <a routerLink="/login">Logout</a>
    </button>
  </div>
</div>


----------------------------------
<div class="w-full h-[calc(100vh-70px)] bg-gray-100 p-5">
  <!-- CRUD Table Section -->
  <div class="w-full bg-white rounded-md shadow-md p-4">
    <h2 class="text-xl font-semibold mb-4">User Management</h2>
    <div class="mb-4 flex justify-end">
      <button class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" (click)="openCreateModal()">
        Add User
      </button>
    </div>
    <table class="table-auto w-full border-collapse border border-gray-300">
      <thead>
        <tr class="bg-gray-200 text-left">
          <th class="border border-gray-300 px-4 py-2">ID</th>
          <th class="border border-gray-300 px-4 py-2">Name</th>
          <th class="border border-gray-300 px-4 py-2">Username</th>
          <th class="border border-gray-300 px-4 py-2">Balance</th>
          <th class="border border-gray-300 px-4 py-2">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let user of users" class="hover:bg-gray-100">
          <td class="border border-gray-300 px-4 py-2">{{ user.customerId }}</td>
          <td class="border border-gray-300 px-4 py-2">{{ user.customerName }}</td>
          <td class="border border-gray-300 px-4 py-2">{{ user.customerUsername }}</td>
          <td class="border border-gray-300 px-4 py-2">{{ user.customerBalance }}</td>
          <td class="border border-gray-300 px-4 py-2">
            <button class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600" (click)="editUser(user)">
              Edit
            </button>
            <button class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 ml-2" (click)="deleteUser(user.customerId)">
              Delete
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---------------
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-admin',
  templateUrl: './admin.component.html',
  styleUrls: ['./admin.component.css'],
})
export class AdminComponent implements OnInit {
  users: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.getAllUsers();
  }

  getAllUsers() {
    this.http.get<any[]>('http://localhost:8099/customer/get').subscribe(
      (data) => {
        this.users = data;
      },
      (error) => {
        console.error('Error fetching users:', error);
      }
    );
  }

  deleteUser(userId: number) {
    this.http.delete(`http://localhost:8099/customer/delete/${userId}`).subscribe(
      () => {
        this.users = this.users.filter((user) => user.customerId !== userId);
      },
      (error) => {
        console.error('Error deleting user:', error);
      }
    );
  }

  editUser(user: any) {
    // Logic to open edit modal and update user details
  }

  openCreateModal() {
    // Logic to open modal for creating a new user
  }
}
---------------------------------------------------------


user modal-

_-----------------------


<div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
  <div class="bg-white p-6 rounded shadow-lg w-1/3">
    <h3 class="text-lg font-semibold mb-4">
      {{ user?.userId ? 'Edit User' : 'Add User' }}
    </h3>
    <form (ngSubmit)="save()">
      <div class="mb-4">
        <label class="block text-gray-700">Name</label>
        <input 
          type="text" 
          [(ngModel)]="user.userName" 
          name="name" 
          class="w-full border px-3 py-2 rounded">
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Username</label>
        <input 
          type="text" 
          [(ngModel)]="user.userUsername" 
          name="username" 
          class="w-full border px-3 py-2 rounded">
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Balance</label>
        <input 
          type="number" 
          [(ngModel)]="user.userBalance" 
          name="balance" 
          class="w-full border px-3 py-2 rounded">
      </div>
      <div class="flex justify-end gap-4">
        <button type="button" (click)="close()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Cancel</button>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          Save
        </button>
      </div>
    </form>
  </div>
</div>



---------------------------------
<!-- Modal -->
  <app-user-modal
    [user]="selectedUser"
    (close)="closeUserModal()"
    (save)="saveUser($event)">
  </app-user-modal>
-----------------\


transactions.comp.html

---
<div class="p-4">
  <h2 class="text-xl font-semibold mb-4">Transactions</h2>

  <!-- Filter Options -->
  <div class="mb-4 flex gap-4">
    <input 
      type="text" 
      [(ngModel)]="filterUsername" 
      placeholder="Filter by Username" 
      class="border px-3 py-2 rounded">
    <button (click)="fetchTransactions()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
      Apply Filter
    </button>
  </div>

  <!-- Transactions Table -->
  <div class="overflow-x-auto">
    <table class="min-w-full bg-white rounded shadow">
      <thead>
        <tr class="bg-gray-200 text-gray-600 text-left">
          <th class="py-2 px-4">ID</th>
          <th class="py-2 px-4">Username</th>
          <th class="py-2 px-4">Type</th>
          <th class="py-2 px-4">Amount</th>
          <th class="py-2 px-4">Date</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let transaction of transactions" class="border-b">
          <td class="py-2 px-4">{{ transaction.transactionId }}</td>
          <td class="py-2 px-4">{{ transaction.username }}</td>
          <td class="py-2 px-4">{{ transaction.transactionType }}</td>
          <td class="py-2 px-4">{{ transaction.amount | currency }}</td>
          <td class="py-2 px-4">{{ transaction.transactionDate | date }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
---------------------
user-modal-comp.ts
--------
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-user-modal',
  templateUrl: './user-modal.component.html',
  styleUrls: ['./user-modal.component.css'], // Adjust based on your CSS setup
})
export class UserModalComponent {
  // Input property to receive the user object
  @Input() user: any = {
    userId: null,
    userName: '',
    userUsername: '',
    userBalance: 0,
  };

  // Output properties to emit events when the modal is closed or saved
  @Output() close = new EventEmitter<void>();
  @Output() save = new EventEmitter<any>();

  /**
   * Close the modal.
   */
  closeModal(): void {
    this.close.emit();
  }

  /**
   * Save the user details and emit the save event.
   */
  saveUser(): void {
    if (this.isFormValid()) {
      this.save.emit(this.user);
      this.closeModal(); // Close the modal after saving
    } else {
      alert('Please fill in all fields correctly.');
    }
  }

  /**
   * Check if the form is valid.
   */
  private isFormValid(): boolean {
    return (
      this.user.userName.trim() !== '' &&
      this.user.userUsername.trim() !== '' &&
      this.user.userBalance >= 0
    );
  }
}

----------------------- transactions------------------------------


<div class="container mt-4">
  <h1 class="text-center">Transaction History</h1>
  <div *ngIf="transactions.length > 0; else noData">
    <table class="table table-striped mt-4">
      <thead>
        <tr>
          <th scope="col">Transaction ID</th>
          <th scope="col">Transaction Date</th>
          <th scope="col">Transaction Type</th>
          <th scope="col">Amount</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let transaction of transactions">
          <td>{{ transaction.transactionId }}</td>
          <td>{{ transaction.transactionDate | date: 'short' }}</td>
          <td>
            <span
              [ngClass]="{
                'text-success': transaction.transactionType === 'Credit',
                'text-danger': transaction.transactionType === 'Debit'
              }"
            >
              {{ transaction.transactionType }}
            </span>
          </td>
          <td>{{ transaction.amount | currency }}</td>
        </tr>
      </tbody>
    </table>
  </div>
  <ng-template #noData>
    <p class="text-center mt-4">No transactions available.</p>
  </ng-template>
</div>


-------------------

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-transactions',
  templateUrl: './transactions.component.html',
  styleUrls: ['./transactions.component.css'],
})
export class TransactionsComponent implements OnInit {
  transactions: any[] = [];
  customerId: string = '';

  constructor(private http: HttpClient, private route: ActivatedRoute) {}

  ngOnInit(): void {
    // Get the customerId from the route parameters
    this.customerId = this.route.snapshot.paramMap.get('customerId') || '';

    // Fetch transactions based on customerId
    this.getTransactions();
  }

  getTransactions(): void {
    const url = `http://localhost:8080/api/transactions/${this.customerId}`;
    this.http.get<any[]>(url).subscribe(
      (data) => {
        this.transactions = data;
      },
      (error) => {
        console.error('Error fetching transactions:', error);
      }
    );
  }
}


---------------------------------
service-
--
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class TransactionsService {
  private baseUrl = 'http://localhost:8080/api/transactions';

  constructor(private http: HttpClient) {}

  getTransactionsByCustomerId(customerId: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/${customerId}`);
  }
}

------

udpates

----
constructor(
  private transactionsService: TransactionsService,
  private route: ActivatedRoute
) {}

getTransactions(): void {
  this.transactionsService
    .getTransactionsByCustomerId(this.customerId)
    .subscribe(
      (data) => {
        this.transactions = data;
      },
      (error) => {
        console.error('Error fetching transactions:', error);
      }
    );
}
--
const routes: Routes = [
  { path: 'transactions/:customerId', component: TransactionsComponent },
];

